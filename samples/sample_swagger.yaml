swagger: '2.0'
info:
  title: E-Commerce API
  description: A comprehensive e-commerce API for managing products, orders, and customers
  version: 1.0.0
  contact:
    name: API Support Team
    email: support@ecommerce.com
    url: https://support.ecommerce.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
host: api.ecommerce.com
basePath: /v1
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  api_key:
    type: apiKey
    name: X-API-Key
    in: header
    description: API key for authentication
  bearer_token:
    type: apiKey
    name: Authorization
    in: header
    description: Bearer token for authentication
  basic_auth:
    type: basic
    description: Basic authentication with username and password
paths:
  /products:
    get:
      tags:
        - Products
      summary: List all products
      description: Retrieve a paginated list of products with optional filtering
      operationId: getProducts
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          type: integer
          default: 1
          minimum: 1
        - name: limit
          in: query
          description: Number of products per page
          required: false
          type: integer
          default: 20
          maximum: 100
          minimum: 1
        - name: category
          in: query
          description: Filter by product category
          required: false
          type: string
        - name: min_price
          in: query
          description: Minimum price filter
          required: false
          type: number
          format: float
        - name: max_price
          in: query
          description: Maximum price filter
          required: false
          type: number
          format: float
        - name: in_stock
          in: query
          description: Filter by stock availability
          required: false
          type: boolean
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ProductList'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
      security:
        - api_key: []
    post:
      tags:
        - Products
      summary: Create a new product
      description: Add a new product to the catalog
      operationId: createProduct
      parameters:
        - name: product
          in: body
          description: Product object to create
          required: true
          schema:
            $ref: '#/definitions/ProductCreate'
      responses:
        '201':
          description: Product created successfully
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
      security:
        - bearer_token: []
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve detailed information about a specific product
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Product'
        '404':
          description: Product not found
          schema:
            $ref: '#/definitions/Error'
      security:
        - api_key: []
    put:
      tags:
        - Products
      summary: Update product
      description: Update an existing product
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          type: string
          format: uuid
        - name: product
          in: body
          description: Updated product data
          required: true
          schema:
            $ref: '#/definitions/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
          schema:
            $ref: '#/definitions/Product'
        '404':
          description: Product not found
        '401':
          description: Unauthorized
      security:
        - bearer_token: []
    delete:
      tags:
        - Products
      summary: Delete product
      description: Remove a product from the catalog
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
        '401':
          description: Unauthorized
      security:
        - bearer_token: []
  /orders:
    get:
      tags:
        - Orders
      summary: List orders
      description: Retrieve orders for the authenticated user
      operationId: getOrders
      parameters:
        - name: status
          in: query
          description: Filter by order status
          required: false
          type: string
          enum:
            - pending
            - processing
            - shipped
            - delivered
            - cancelled
        - name: start_date
          in: query
          description: Filter orders from this date
          required: false
          type: string
          format: date
        - name: end_date
          in: query
          description: Filter orders until this date
          required: false
          type: string
          format: date
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/OrderList'
        '401':
          description: Unauthorized
      security:
        - bearer_token: []
    post:
      tags:
        - Orders
      summary: Create order
      description: Create a new order
      operationId: createOrder
      parameters:
        - name: order
          in: body
          description: Order details
          required: true
          schema:
            $ref: '#/definitions/OrderCreate'
      responses:
        '201':
          description: Order created successfully
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid order data
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
      security:
        - bearer_token: []
  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve detailed information about a specific order
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          description: Order ID
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Order'
        '404':
          description: Order not found
        '401':
          description: Unauthorized
      security:
        - bearer_token: []
  /customers:
    get:
      tags:
        - Customers
      summary: List customers
      description: Retrieve a list of customers (admin only)
      operationId: getCustomers
      parameters:
        - name: email
          in: query
          description: Filter by email address
          required: false
          type: string
          format: email
        - name: active
          in: query
          description: Filter by active status
          required: false
          type: boolean
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/CustomerList'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - bearer_token: []
    post:
      tags:
        - Customers
      summary: Create customer
      description: Register a new customer account
      operationId: createCustomer
      parameters:
        - name: customer
          in: body
          description: Customer registration data
          required: true
          schema:
            $ref: '#/definitions/CustomerCreate'
      responses:
        '201':
          description: Customer created successfully
          schema:
            $ref: '#/definitions/Customer'
        '400':
          description: Invalid customer data
          schema:
            $ref: '#/definitions/Error'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return access token
      operationId: login
      parameters:
        - name: credentials
          in: body
          description: Login credentials
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: Login successful
          schema:
            $ref: '#/definitions/LoginResponse'
        '401':
          description: Invalid credentials
          schema:
            $ref: '#/definitions/Error'
      security:
        - basic_auth: []
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Refresh access token using refresh token
      operationId: refreshToken
      parameters:
        - name: refresh_token
          in: body
          description: Refresh token
          required: true
          schema:
            $ref: '#/definitions/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '401':
          description: Invalid refresh token
      security:
        - api_key: []
definitions:
  Product:
    type: object
    required:
      - id
      - name
      - price
      - category
    properties:
      id:
        type: string
        format: uuid
        description: Unique product identifier
      name:
        type: string
        minLength: 1
        maxLength: 200
        description: Product name
      description:
        type: string
        description: Product description
      price:
        type: number
        format: float
        minimum: 0
        description: Product price
      category:
        type: string
        enum:
          - electronics
          - clothing
          - books
          - home
          - sports
        description: Product category
      stock:
        type: integer
        minimum: 0
        description: Available stock quantity
      images:
        type: array
        items:
          type: string
          format: uri
        description: Product image URLs
      created_at:
        type: string
        format: date-time
        description: Creation timestamp
      updated_at:
        type: string
        format: date-time
        description: Last update timestamp
  ProductCreate:
    type: object
    required:
      - name
      - price
      - category
    properties:
      name:
        type: string
        minLength: 1
        maxLength: 200
      description:
        type: string
      price:
        type: number
        format: float
        minimum: 0
      category:
        type: string
        enum:
          - electronics
          - clothing
          - books
          - home
          - sports
      stock:
        type: integer
        minimum: 0
        default: 0
      images:
        type: array
        items:
          type: string
          format: uri
  ProductUpdate:
    type: object
    properties:
      name:
        type: string
        minLength: 1
        maxLength: 200
      description:
        type: string
      price:
        type: number
        format: float
        minimum: 0
      category:
        type: string
        enum:
          - electronics
          - clothing
          - books
          - home
          - sports
      stock:
        type: integer
        minimum: 0
      images:
        type: array
        items:
          type: string
          format: uri
  ProductList:
    type: object
    properties:
      products:
        type: array
        items:
          $ref: '#/definitions/Product'
      pagination:
        $ref: '#/definitions/Pagination'
      total:
        type: integer
        description: Total number of products
  Order:
    type: object
    required:
      - id
      - customer_id
      - items
      - total
      - status
    properties:
      id:
        type: string
        format: uuid
        description: Unique order identifier
      customer_id:
        type: string
        format: uuid
        description: Customer ID
      items:
        type: array
        items:
          $ref: '#/definitions/OrderItem'
        minItems: 1
      total:
        type: number
        format: float
        minimum: 0
        description: Order total amount
      status:
        type: string
        enum:
          - pending
          - processing
          - shipped
          - delivered
          - cancelled
        description: Order status
      shipping_address:
        $ref: '#/definitions/Address'
      billing_address:
        $ref: '#/definitions/Address'
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
  OrderCreate:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/OrderItemCreate'
        minItems: 1
      shipping_address:
        $ref: '#/definitions/Address'
      billing_address:
        $ref: '#/definitions/Address'
  OrderItem:
    type: object
    required:
      - product_id
      - quantity
      - price
    properties:
      product_id:
        type: string
        format: uuid
      product_name:
        type: string
      quantity:
        type: integer
        minimum: 1
      price:
        type: number
        format: float
        minimum: 0
      subtotal:
        type: number
        format: float
        minimum: 0
  OrderItemCreate:
    type: object
    required:
      - product_id
      - quantity
    properties:
      product_id:
        type: string
        format: uuid
      quantity:
        type: integer
        minimum: 1
  OrderList:
    type: object
    properties:
      orders:
        type: array
        items:
          $ref: '#/definitions/Order'
      pagination:
        $ref: '#/definitions/Pagination'
  Customer:
    type: object
    required:
      - id
      - email
      - first_name
      - last_name
    properties:
      id:
        type: string
        format: uuid
        description: Unique customer identifier
      email:
        type: string
        format: email
        description: Customer email address
      first_name:
        type: string
        minLength: 1
        maxLength: 50
        description: Customer first name
      last_name:
        type: string
        minLength: 1
        maxLength: 50
        description: Customer last name
      phone:
        type: string
        description: Customer phone number
      active:
        type: boolean
        default: true
        description: Whether the customer account is active
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
  CustomerCreate:
    type: object
    required:
      - email
      - first_name
      - last_name
      - password
    properties:
      email:
        type: string
        format: email
      first_name:
        type: string
        minLength: 1
        maxLength: 50
      last_name:
        type: string
        minLength: 1
        maxLength: 50
      phone:
        type: string
      password:
        type: string
        minLength: 8
        format: password
  CustomerList:
    type: object
    properties:
      customers:
        type: array
        items:
          $ref: '#/definitions/Customer'
      pagination:
        $ref: '#/definitions/Pagination'
  Address:
    type: object
    required:
      - street
      - city
      - state
      - zip_code
      - country
    properties:
      street:
        type: string
        description: Street address
      city:
        type: string
        description: City
      state:
        type: string
        description: State or province
      zip_code:
        type: string
        description: ZIP or postal code
      country:
        type: string
        description: Country
  Pagination:
    type: object
    properties:
      page:
        type: integer
        minimum: 1
        description: Current page number
      limit:
        type: integer
        minimum: 1
        description: Items per page
      total:
        type: integer
        minimum: 0
        description: Total number of items
      pages:
        type: integer
        minimum: 0
        description: Total number of pages
  LoginRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
        description: User email address
      password:
        type: string
        format: password
        description: User password
  LoginResponse:
    type: object
    required:
      - access_token
      - token_type
      - expires_in
    properties:
      access_token:
        type: string
        description: JWT access token
      refresh_token:
        type: string
        description: Refresh token for getting new access tokens
      token_type:
        type: string
        enum:
          - Bearer
        description: Token type
      expires_in:
        type: integer
        description: Token expiration time in seconds
      user:
        $ref: '#/definitions/Customer'
  RefreshRequest:
    type: object
    required:
      - refresh_token
    properties:
      refresh_token:
        type: string
        description: Refresh token
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        description: Error code
      message:
        type: string
        description: Error message
      details:
        type: object
        description: Additional error details 